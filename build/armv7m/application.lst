ARM GAS  /var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"application.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "app/armv7m/src/application.c"
  18              		.section	.text.kPutc,"ax",%progbits
  19              		.align	1
  20              		.global	kPutc
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	kPutc:
  26              	.LVL0:
  27              	.LFB56:
   1:app/armv7m/src/application.c **** #include "application.h"
   2:app/armv7m/src/application.c **** 
   3:app/armv7m/src/application.c **** /* in this example, stacks and task handles are extern declared in application.h that is included i
   4:app/armv7m/src/application.c **** RK_TASK_HANDLE task1Handle;
   5:app/armv7m/src/application.c **** RK_TASK_HANDLE task2Handle;
   6:app/armv7m/src/application.c **** RK_TASK_HANDLE task3Handle;
   7:app/armv7m/src/application.c **** 
   8:app/armv7m/src/application.c **** 
   9:app/armv7m/src/application.c **** /* keep stacks double-word aligned for ARMv7M */
  10:app/armv7m/src/application.c **** INT stack1[STACKSIZE] __attribute__((aligned(8)));
  11:app/armv7m/src/application.c **** INT stack2[STACKSIZE] __attribute__((aligned(8)));
  12:app/armv7m/src/application.c **** INT stack3[STACKSIZE] __attribute__((aligned(8)));
  13:app/armv7m/src/application.c **** 
  14:app/armv7m/src/application.c **** /* UART output for QEMU */
  15:app/armv7m/src/application.c **** #ifndef UART0_BASE
  16:app/armv7m/src/application.c **** #define UART0_BASE 0x4000C000
  17:app/armv7m/src/application.c **** #endif
  18:app/armv7m/src/application.c **** volatile unsigned * const UART0_DR = (unsigned *)UART0_BASE;
  19:app/armv7m/src/application.c **** 
  20:app/armv7m/src/application.c **** VOID kPutc(CHAR const c) 
  21:app/armv7m/src/application.c **** {
  28              		.loc 1 21 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  22:app/armv7m/src/application.c ****     *UART0_DR = c;
  33              		.loc 1 22 5 view .LVU1
  34              		.loc 1 22 15 is_stmt 0 view .LVU2
  35 0000 014B     		ldr	r3, .L2
  36 0002 1860     		str	r0, [r3]
ARM GAS  /var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s 			page 2


  23:app/armv7m/src/application.c **** }
  37              		.loc 1 23 1 view .LVU3
  38 0004 7047     		bx	lr
  39              	.L3:
  40 0006 00BF     		.align	2
  41              	.L2:
  42 0008 00C00040 		.word	1073790976
  43              		.cfi_endproc
  44              	.LFE56:
  46              		.section	.text.kPuts,"ax",%progbits
  47              		.align	1
  48              		.global	kPuts
  49              		.syntax unified
  50              		.thumb
  51              		.thumb_func
  53              	kPuts:
  54              	.LVL1:
  55              	.LFB57:
  24:app/armv7m/src/application.c **** 
  25:app/armv7m/src/application.c **** VOID kPuts(const CHAR *str) 
  26:app/armv7m/src/application.c **** {
  56              		.loc 1 26 1 is_stmt 1 view -0
  57              		.cfi_startproc
  58              		@ args = 0, pretend = 0, frame = 0
  59              		@ frame_needed = 0, uses_anonymous_args = 0
  60              		.loc 1 26 1 is_stmt 0 view .LVU5
  61 0000 10B5     		push	{r4, lr}
  62              		.cfi_def_cfa_offset 8
  63              		.cfi_offset 4, -8
  64              		.cfi_offset 14, -4
  65 0002 0446     		mov	r4, r0
  27:app/armv7m/src/application.c ****     while(*str) 
  66              		.loc 1 27 5 is_stmt 1 view .LVU6
  67              		.loc 1 27 10 is_stmt 0 view .LVU7
  68 0004 02E0     		b	.L5
  69              	.LVL2:
  70              	.L6:
  28:app/armv7m/src/application.c ****     {
  29:app/armv7m/src/application.c ****         kPutc(*str++);
  71              		.loc 1 29 9 is_stmt 1 view .LVU8
  72              		.loc 1 29 19 is_stmt 0 view .LVU9
  73 0006 0134     		adds	r4, r4, #1
  74              	.LVL3:
  75              		.loc 1 29 9 view .LVU10
  76 0008 FFF7FEFF 		bl	kPutc
  77              	.LVL4:
  78              	.L5:
  27:app/armv7m/src/application.c ****     while(*str) 
  79              		.loc 1 27 11 is_stmt 1 view .LVU11
  80 000c 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
  81 000e 0028     		cmp	r0, #0
  82 0010 F9D1     		bne	.L6
  30:app/armv7m/src/application.c ****     }
  31:app/armv7m/src/application.c **** }
  83              		.loc 1 31 1 is_stmt 0 view .LVU12
  84 0012 10BD     		pop	{r4, pc}
  85              		.loc 1 31 1 view .LVU13
ARM GAS  /var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s 			page 3


  86              		.cfi_endproc
  87              	.LFE57:
  89              		.section	.rodata.synch.str1.4,"aMS",%progbits,1
  90              		.align	2
  91              	.LC0:
  92 0000 416C6C20 		.ascii	"All task synch'd.\012\015\000"
  92      7461736B 
  92      2073796E 
  92      63682764 
  92      2E0A0D00 
  93              		.section	.text.synch,"ax",%progbits
  94              		.align	1
  95              		.syntax unified
  96              		.thumb
  97              		.thumb_func
  99              	synch:
 100              	.LFB59:
  32:app/armv7m/src/application.c **** 
  33:app/armv7m/src/application.c **** RK_EVENT syncEvent;  
  34:app/armv7m/src/application.c **** UINT syncCounter; 
  35:app/armv7m/src/application.c **** RK_MUTEX syncMutex;  
  36:app/armv7m/src/application.c **** #define SYNC_CONDITION (syncCounter>=3) /* needed tasks in the barrier */
  37:app/armv7m/src/application.c **** VOID kApplicationInit(VOID)
  38:app/armv7m/src/application.c **** {
  39:app/armv7m/src/application.c **** 	kMutexInit(&syncMutex);
  40:app/armv7m/src/application.c **** 	kEventInit(&syncEvent);
  41:app/armv7m/src/application.c **** 	syncCounter = 0;
  42:app/armv7m/src/application.c **** }
  43:app/armv7m/src/application.c **** /* only one task can be active within a monitor
  44:app/armv7m/src/application.c ****  they are enqueued either on the mutex or on the event
  45:app/armv7m/src/application.c ****  */
  46:app/armv7m/src/application.c **** static VOID synch(VOID)
  47:app/armv7m/src/application.c **** {
 101              		.loc 1 47 1 is_stmt 1 view -0
 102              		.cfi_startproc
 103              		@ args = 0, pretend = 0, frame = 0
 104              		@ frame_needed = 0, uses_anonymous_args = 0
 105 0000 10B5     		push	{r4, lr}
 106              		.cfi_def_cfa_offset 8
 107              		.cfi_offset 4, -8
 108              		.cfi_offset 14, -4
  48:app/armv7m/src/application.c **** 	kMutexLock(&syncMutex, RK_NO_INHERIT, RK_WAIT_FOREVER);
 109              		.loc 1 48 2 view .LVU15
 110 0002 4FF0FF32 		mov	r2, #-1
 111 0006 0021     		movs	r1, #0
 112 0008 1348     		ldr	r0, .L12
 113 000a FFF7FEFF 		bl	kMutexLock
 114              	.LVL5:
  49:app/armv7m/src/application.c **** 	syncCounter += 1;
 115              		.loc 1 49 2 view .LVU16
 116              		.loc 1 49 14 is_stmt 0 view .LVU17
 117 000e 134A     		ldr	r2, .L12+4
 118 0010 1368     		ldr	r3, [r2]
 119 0012 0133     		adds	r3, r3, #1
 120 0014 1360     		str	r3, [r2]
  50:app/armv7m/src/application.c **** 	if (!(SYNC_CONDITION))
 121              		.loc 1 50 2 is_stmt 1 view .LVU18
ARM GAS  /var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s 			page 4


 122              		.loc 1 50 5 is_stmt 0 view .LVU19
 123 0016 022B     		cmp	r3, #2
 124 0018 14D8     		bhi	.L9
  51:app/armv7m/src/application.c **** 	{
  52:app/armv7m/src/application.c **** 	    /* must be atomic */
  53:app/armv7m/src/application.c **** 	    kDisableIRQ();
 125              		.loc 1 53 6 is_stmt 1 view .LVU20
 126              	.LBB6:
 127              	.LBI6:
 128              		.file 2 "core/inc/kapi.h"
   1:core/inc/kapi.h **** /******************************************************************************
   2:core/inc/kapi.h ****  *
   3:core/inc/kapi.h ****  *                     [RK0 - Real-Time Kernel '0']
   4:core/inc/kapi.h ****  *
   5:core/inc/kapi.h ****  * Version          :   V0.4.0
   6:core/inc/kapi.h ****  * Architecture     :   ARMv7m
   7:core/inc/kapi.h ****  *
   8:core/inc/kapi.h ****  *
   9:core/inc/kapi.h ****  * Copyright (c) 2025 Antonio Giacomelli
  10:core/inc/kapi.h ****  *
  11:core/inc/kapi.h ****  *
  12:core/inc/kapi.h ****  ******************************************************************************/
  13:core/inc/kapi.h **** /*******************************************************************************
  14:core/inc/kapi.h ****  *
  15:core/inc/kapi.h ****  *  @file kapi.h 
  16:core/inc/kapi.h ****  * 
  17:core/inc/kapi.h ****  *  RK0 Public API
  18:core/inc/kapi.h ****  *
  19:core/inc/kapi.h ****  *  The is the public RK0 API to be used on the highest development layer.
  20:core/inc/kapi.h ****  *  By default it is included in app/inc/application.h
  21:core/inc/kapi.h ****  *
  22:core/inc/kapi.h ****  *  *** API Conventions: ***
  23:core/inc/kapi.h ****  *
  24:core/inc/kapi.h ****  *  Every kernel call starts with a lower-case 'k';
  25:core/inc/kapi.h ****  *  If acting on a kernel object that is not a task, it is followed
  26:core/inc/kapi.h ****  *  by a kernel object name and an action:
  27:core/inc/kapi.h ****  *  e.g., kSemaPost(RK_SEMA *const kobj): posts to a semaphore.
  28:core/inc/kapi.h ****  *  kobj is always a constant pointer to a kernel object.
  29:core/inc/kapi.h ****  *  If not receiving a kobj as the first input paramater,  it is acting on a
  30:core/inc/kapi.h ****  *  task - that might be the caller task or a target task.
  31:core/inc/kapi.h ****  *  If not on the caller task, the first argument will be of the type
  32:core/inc/kapi.h ****  *  RK_TASK_HANDLE:
  33:core/inc/kapi.h ****  *  E.g.: kSignalSet(RK_TASK_HANDLE taskHandle, ULONG mask); 
  34:core/inc/kapi.h ****  *        sends a direct signal to a task.
  35:core/inc/kapi.h ****  *  Otherwise, it acts on the caller task:
  36:core/inc/kapi.h ****  *  E.g.: kSleep(ticks); task suspends sleeping for the given number of ticks.
  37:core/inc/kapi.h ****  *
  38:core/inc/kapi.h ****  * 
  39:core/inc/kapi.h ****  * Timeout specific values: RK_NO_WAIT (try-and-return), 
  40:core/inc/kapi.h ****  * 							RK_WAIT_FOREVER (do not expire)
  41:core/inc/kapi.h ****  * 
  42:core/inc/kapi.h ****  * For a list of ERROR CODES (RK_ERR type) look at kdefs.h.
  43:core/inc/kapi.h ****  *
  44:core/inc/kapi.h ****  ******************************************************************************/
  45:core/inc/kapi.h **** 
  46:core/inc/kapi.h **** #ifndef RK_API_H
  47:core/inc/kapi.h **** #define RK_API_H
ARM GAS  /var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s 			page 5


  48:core/inc/kapi.h **** 
  49:core/inc/kapi.h **** #include <kexecutive.h>
  50:core/inc/kapi.h **** 
  51:core/inc/kapi.h **** /******************************************************************************/
  52:core/inc/kapi.h **** /**
  53:core/inc/kapi.h ****  * @brief 			   Create a new task. Task prototype:
  54:core/inc/kapi.h ****  *
  55:core/inc/kapi.h ****  *                     VOID TaskN( VOID *)
  56:core/inc/kapi.h ****  *
  57:core/inc/kapi.h ****  * @param taskHandle   Handle object for the task.
  58:core/inc/kapi.h ****  *
  59:core/inc/kapi.h ****  * @param taskFuncPtr  Pointer to the task entry function.
  60:core/inc/kapi.h ****  *
  61:core/inc/kapi.h ****  * @param taskName     Task name. Keep it as much as 8 Bytes.
  62:core/inc/kapi.h ****  *
  63:core/inc/kapi.h ****  * @param stackAddrPtr Pointer to the task stack (the array variable).
  64:core/inc/kapi.h ****  *
  65:core/inc/kapi.h ****  * @param stackSize    Size of the task stack (in WORDS. 1WORD=4BYTES)
  66:core/inc/kapi.h ****  *
  67:core/inc/kapi.h ****  * @param argsPtr      Pointer to initial task arguments.
  68:core/inc/kapi.h ****  *
  69:core/inc/kapi.h ****  * @param timeSlice    Time-slice in ticks
  70:core/inc/kapi.h ****  *
  71:core/inc/kapi.h ****  *
  72:core/inc/kapi.h ****  * @param priority     Task priority - valid range: 0-31.
  73:core/inc/kapi.h ****  *
  74:core/inc/kapi.h ****  * @param runToCompl   If this flag is 'TRUE',  the task once dispatched
  75:core/inc/kapi.h ****  *                     although can be interrupted by tick and other hardware
  76:core/inc/kapi.h ****  *                     interrupt lines, won't be preempted by user tasks.
  77:core/inc/kapi.h ****  *                     runToCompl tasks are normally deferred handlers for ISRs.
  78:core/inc/kapi.h ****  *
  79:core/inc/kapi.h ****  * @return RK_SUCCESS, or specific error
  80:core/inc/kapi.h ****  */
  81:core/inc/kapi.h **** RK_ERR kCreateTask( RK_TASK_HANDLE *taskHandlePtr,
  82:core/inc/kapi.h **** 		const RK_TASKENTRY taskFuncPtr, CHAR *const taskName,
  83:core/inc/kapi.h **** 		INT *const stackAddrPtr, const UINT stackSize, VOID *argsPtr,
  84:core/inc/kapi.h **** #if(RK_CONF_SCH_TSLICE==ON)
  85:core/inc/kapi.h ****          const RK_TICK timeSlice,
  86:core/inc/kapi.h ****  #endif
  87:core/inc/kapi.h **** 		const RK_PRIO priority, const BOOL runToCompl);
  88:core/inc/kapi.h **** 
  89:core/inc/kapi.h **** /**
  90:core/inc/kapi.h ****  * @brief Initialises the kernel. To be called in main()
  91:core/inc/kapi.h ****  *        after hardware initialisation and task creation.
  92:core/inc/kapi.h ****  *
  93:core/inc/kapi.h ****  */
  94:core/inc/kapi.h **** VOID kInit( VOID);
  95:core/inc/kapi.h **** 
  96:core/inc/kapi.h **** /**
  97:core/inc/kapi.h ****  * @brief Yields the current task.
  98:core/inc/kapi.h ****  *
  99:core/inc/kapi.h ****  */
 100:core/inc/kapi.h **** VOID kYield( VOID);
 101:core/inc/kapi.h **** 
 102:core/inc/kapi.h **** /*******************************************************************************/
 103:core/inc/kapi.h **** /* COUNTER SEMAPHORE                                                           */
 104:core/inc/kapi.h **** /*******************************************************************************/
ARM GAS  /var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s 			page 6


 105:core/inc/kapi.h **** #if (RK_CONF_SEMA==ON)
 106:core/inc/kapi.h **** /**
 107:core/inc/kapi.h ****  * @brief      		Initialise a semaphore
 108:core/inc/kapi.h ****  * @param kobj  		Semaphore address
 109:core/inc/kapi.h ****  * @param value 		Initial value (>= 0)
 110:core/inc/kapi.h ****  * @return  RK_SUCCESS, or specific error
 111:core/inc/kapi.h ****  */
 112:core/inc/kapi.h **** 
 113:core/inc/kapi.h **** RK_ERR kSemaInit( RK_SEMA *const kobj, const INT value);
 114:core/inc/kapi.h **** 
 115:core/inc/kapi.h **** /**
 116:core/inc/kapi.h ****  * @brief 		Wait on a semaphore
 117:core/inc/kapi.h ****  * @param kobj 		Semaphore address
 118:core/inc/kapi.h ****  * @param timeout	Maximum suspension time
 119:core/inc/kapi.h ****  * @return   RK_SUCCESS, or specific error
 120:core/inc/kapi.h ****  */
 121:core/inc/kapi.h **** RK_ERR kSemaPend( RK_SEMA *const kobj, const RK_TICK timeout);
 122:core/inc/kapi.h **** 
 123:core/inc/kapi.h **** #define kSemaWait(p, t) kSemaPend(p, t) /* alias */
 124:core/inc/kapi.h **** 
 125:core/inc/kapi.h **** /**
 126:core/inc/kapi.h ****  * @brief Signal a semaphore
 127:core/inc/kapi.h ****  * @param kobj Semaphore address
 128:core/inc/kapi.h ****  * @return RK_SUCCESS, or specific error
 129:core/inc/kapi.h ****  */
 130:core/inc/kapi.h **** VOID kSemaPost( RK_SEMA *const kobj);
 131:core/inc/kapi.h **** 
 132:core/inc/kapi.h **** #define kSemaSignal(p) kSemaPost(p) 
 133:core/inc/kapi.h **** 
 134:core/inc/kapi.h **** /**
 135:core/inc/kapi.h ****  * @brief 		Return the counter's value of a semaphore
 136:core/inc/kapi.h ****  * @param kobj  Semaphore address
 137:core/inc/kapi.h ****  * @return      Counter's value,
 138:core/inc/kapi.h ****  *             	RK_INT_MAX if error
 139:core/inc/kapi.h ****  */
 140:core/inc/kapi.h **** INT kSemaQuery( RK_SEMA *const kobj);
 141:core/inc/kapi.h **** 
 142:core/inc/kapi.h **** #endif
 143:core/inc/kapi.h **** /*******************************************************************************/
 144:core/inc/kapi.h **** /* MUTEX SEMAPHORE                                                             */
 145:core/inc/kapi.h **** /*******************************************************************************/
 146:core/inc/kapi.h **** #if (RK_CONF_MUTEX==ON)
 147:core/inc/kapi.h **** /**
 148:core/inc/kapi.h ****  * @brief 		Init a mutex
 149:core/inc/kapi.h ****  * @param kobj 	mutex address
 150:core/inc/kapi.h ****  * @return 		RK_SUCCESS or specific error
 151:core/inc/kapi.h ****  */
 152:core/inc/kapi.h **** RK_ERR kMutexInit( RK_MUTEX *const kobj);
 153:core/inc/kapi.h **** 
 154:core/inc/kapi.h **** 
 155:core/inc/kapi.h **** /**
 156:core/inc/kapi.h ****  * @brief 			Lock a mutex
 157:core/inc/kapi.h ****  * @param kobj 		mutex address
 158:core/inc/kapi.h ****  * @param prioInh	Apply priority inheritance (RK_INHERIT/RK_NO_INHERIT)
 159:core/inc/kapi.h ****  * @param timeout	Maximum suspension time
 160:core/inc/kapi.h ****  * @return 			RK_SUCCESS, or specific error
 161:core/inc/kapi.h ****  */
ARM GAS  /var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s 			page 7


 162:core/inc/kapi.h **** RK_ERR kMutexLock( RK_MUTEX *const kobj, BOOL prioInh, RK_TICK timeout);
 163:core/inc/kapi.h **** 
 164:core/inc/kapi.h **** /**
 165:core/inc/kapi.h ****  * @brief Unlock a mutex
 166:core/inc/kapi.h ****  * @param kobj mutex address
 167:core/inc/kapi.h ****  * @return RK_SUCCESS,  or specific error
 168:core/inc/kapi.h ****  */
 169:core/inc/kapi.h **** RK_ERR kMutexUnlock( RK_MUTEX *const kobj);
 170:core/inc/kapi.h **** 
 171:core/inc/kapi.h **** /**
 172:core/inc/kapi.h ****  * @brief Return the state of a mutex (locked/unlocked)
 173:core/inc/kapi.h ****  * @return 1 if locked, 0 unlocked, -1 if invalid mutex state
 174:core/inc/kapi.h ****  */
 175:core/inc/kapi.h **** INT kMutexQuery( RK_MUTEX *const kobj);
 176:core/inc/kapi.h **** 
 177:core/inc/kapi.h **** #endif
 178:core/inc/kapi.h **** 
 179:core/inc/kapi.h **** /*******************************************************************************/
 180:core/inc/kapi.h **** /* MAILBOX (SINGLE-ITEM MAILBOX)                                               */
 181:core/inc/kapi.h **** /*******************************************************************************/
 182:core/inc/kapi.h **** #if (RK_CONF_MBOX == ON)
 183:core/inc/kapi.h **** 
 184:core/inc/kapi.h **** /**
 185:core/inc/kapi.h ****  * @brief               Initialises an indirect single mailbox.
 186:core/inc/kapi.h ****  * @param kobj          Mailbox address.
 187:core/inc/kapi.h ****  * @param initMail		If initialising full, address of initial mail.
 188:core/inc/kapi.h ****  *  					Otherwise NULL.
 189:core/inc/kapi.h ****  * @return              RK_SUCCESS or specific error.
 190:core/inc/kapi.h ****  */
 191:core/inc/kapi.h **** 
 192:core/inc/kapi.h **** RK_ERR kMboxInit( RK_MBOX *const kobj, VOID *initMail);
 193:core/inc/kapi.h **** 
 194:core/inc/kapi.h **** /**
 195:core/inc/kapi.h ****  * @brief            Assigns a task owner for the mailbox
 196:core/inc/kapi.h ****  * @param kobj       Mailbox address
 197:core/inc/kapi.h ****  * @param taskHandle Task Handle
 198:core/inc/kapi.h ****  * @return           RK_SUCCESS or specific error.
 199:core/inc/kapi.h ****  */
 200:core/inc/kapi.h **** RK_ERR kMboxSetOwner( RK_MBOX *const kobj, const RK_TASK_HANDLE taskHandle);
 201:core/inc/kapi.h **** 
 202:core/inc/kapi.h **** /**
 203:core/inc/kapi.h ****  * @brief               Send to a mailbox. Task blocks when full.
 204:core/inc/kapi.h ****  * @param kobj          Mailbox address.
 205:core/inc/kapi.h ****  * @param sendPtr       Mail address.
 206:core/inc/kapi.h ****  * @param timeout       Suspension time-out
 207:core/inc/kapi.h ****  * @return              RK_SUCCESS or specific error.
 208:core/inc/kapi.h ****  */
 209:core/inc/kapi.h **** RK_ERR kMboxPost( RK_MBOX *const kobj, VOID *sendPtr, RK_TICK timeout);
 210:core/inc/kapi.h **** /**
 211:core/inc/kapi.h ****  * @brief               Receive from a mailbox. Block if empty.
 212:core/inc/kapi.h ****  *
 213:core/inc/kapi.h ****  * @param kobj          Mailbox address.
 214:core/inc/kapi.h ****  * @param recvPPtr      Address that will store the message address (pointer-to-pointer).
 215:core/inc/kapi.h ****  * @param timeout		Suspension time-out
 216:core/inc/kapi.h ****  * @return				RK_SUCCESS or specific error.
 217:core/inc/kapi.h ****  */
 218:core/inc/kapi.h **** RK_ERR kMboxPend( RK_MBOX *const kobj, VOID **recvPPtr, RK_TICK timeout);
ARM GAS  /var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s 			page 8


 219:core/inc/kapi.h **** 
 220:core/inc/kapi.h **** #if (RK_CONF_FUNC_MBOX_POSTOVW==(ON))
 221:core/inc/kapi.h **** 
 222:core/inc/kapi.h **** /**
 223:core/inc/kapi.h ****  * @brief			Post to a mailbox even if it is full, overwriting the
 224:core/inc/kapi.h ****  *                  the current mail.
 225:core/inc/kapi.h ****  * @param kobj		Mailbox address.
 226:core/inc/kapi.h ****  * @param sendPtr   Mail address.
 227:core/inc/kapi.h ****  * @return          RK_SUCCESS or specific error
 228:core/inc/kapi.h ****  */
 229:core/inc/kapi.h **** RK_ERR kMboxPostOvw( RK_MBOX *const kobj, VOID *sendPtr);
 230:core/inc/kapi.h **** 
 231:core/inc/kapi.h **** #endif
 232:core/inc/kapi.h **** 
 233:core/inc/kapi.h **** #if (RK_CONF_FUNC_MBOX_PEEK==ON)
 234:core/inc/kapi.h **** 
 235:core/inc/kapi.h **** /**
 236:core/inc/kapi.h ****  * @brief 			   Reads the mail without extracting it.
 237:core/inc/kapi.h ****  * @param kobj		   Mailbox address.
 238:core/inc/kapi.h ****  * @param peekPPtr	   Pointer to receive address.
 239:core/inc/kapi.h ****  * @return			   RK_SUCCESS or specific error.
 240:core/inc/kapi.h ****  */
 241:core/inc/kapi.h **** RK_ERR kMboxPeek( RK_MBOX *const kobj, VOID **peekPPtr);
 242:core/inc/kapi.h **** 
 243:core/inc/kapi.h **** #endif
 244:core/inc/kapi.h **** 
 245:core/inc/kapi.h **** #if (RK_CONF_FUNC_MBOX_QUERY==ON)
 246:core/inc/kapi.h **** /**
 247:core/inc/kapi.h ****  * @brief   Verify if a mailbox is FULL or EMPTY
 248:core/inc/kapi.h ****  * @return  1 (FULL), 0 (EMPTY)
 249:core/inc/kapi.h ****  */
 250:core/inc/kapi.h **** ULONG kMboxQuery( RK_MBOX *const kobj);
 251:core/inc/kapi.h **** 
 252:core/inc/kapi.h **** #endif
 253:core/inc/kapi.h **** 
 254:core/inc/kapi.h **** #endif /* MBOX  */
 255:core/inc/kapi.h **** /******************************************************************************/
 256:core/inc/kapi.h **** /* MAIL QUEUES                                                                */
 257:core/inc/kapi.h **** /******************************************************************************/
 258:core/inc/kapi.h **** #if (RK_CONF_QUEUE == ON)
 259:core/inc/kapi.h **** 
 260:core/inc/kapi.h **** /**
 261:core/inc/kapi.h ****  * @brief			 Initialises a mail queue.
 262:core/inc/kapi.h ****  * @param kobj		 Mail Queue address
 263:core/inc/kapi.h ****  * @param memPtr     Pointer to the buffer that will store mail addresses
 264:core/inc/kapi.h ****  * @param maxItems   Maximum number of mails.
 265:core/inc/kapi.h ****  * @return           RK_SUCCESS or specific error.
 266:core/inc/kapi.h ****  */
 267:core/inc/kapi.h **** RK_ERR kQueueInit( RK_QUEUE *const kobj, VOID *memPtr,
 268:core/inc/kapi.h **** 		const ULONG maxItems);
 269:core/inc/kapi.h **** 
 270:core/inc/kapi.h **** /**
 271:core/inc/kapi.h ****  * @brief            Assigns a task owner for the queue
 272:core/inc/kapi.h ****  * @param kobj       Mail Queue address
 273:core/inc/kapi.h ****  * @param memPtr     Task Handle
 274:core/inc/kapi.h ****  * @return           RK_SUCCESS or specific error.
 275:core/inc/kapi.h ****  */
ARM GAS  /var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s 			page 9


 276:core/inc/kapi.h **** RK_ERR kQueueSetOwner( RK_QUEUE *const kobj, const RK_TASK_HANDLE taskHandle);
 277:core/inc/kapi.h **** 
 278:core/inc/kapi.h **** /**
 279:core/inc/kapi.h ****  * @brief               Send to a multilbox. Task blocks when full.
 280:core/inc/kapi.h ****  * @param kobj          Mail Queue address.
 281:core/inc/kapi.h ****  * @param sendPtr       Mail address.
 282:core/inc/kapi.h ****  * @param timeout		Suspension time-out
 283:core/inc/kapi.h ****  * @return              RK_SUCCESS or specific error.
 284:core/inc/kapi.h ****  */
 285:core/inc/kapi.h **** 
 286:core/inc/kapi.h **** RK_ERR kQueuePost( RK_QUEUE *const kobj, VOID *sendPtr,
 287:core/inc/kapi.h **** 		RK_TICK const timeout);
 288:core/inc/kapi.h **** 
 289:core/inc/kapi.h **** /**
 290:core/inc/kapi.h ****  * @brief               Receive from a mail queue. Block if empty.
 291:core/inc/kapi.h ****  *
 292:core/inc/kapi.h ****  * @param kobj          Mail Queue address.
 293:core/inc/kapi.h ****  * @param recvPPtr      Address that will store the message address
 294:core/inc/kapi.h ****  * 					  (pointer-to-pointer).
 295:core/inc/kapi.h ****  * @param timeout		Suspension time-out
 296:core/inc/kapi.h ****  * @return				RK_SUCCESS or specific error.
 297:core/inc/kapi.h ****  */
 298:core/inc/kapi.h **** RK_ERR kQueuePend( RK_QUEUE *const kobj, VOID **recvPPtr, RK_TICK const timeout);
 299:core/inc/kapi.h **** 
 300:core/inc/kapi.h **** #if (RK_CONF_FUNC_QUEUE_PEEK==ON)
 301:core/inc/kapi.h **** 
 302:core/inc/kapi.h **** /**
 303:core/inc/kapi.h ****  * @brief 			   Reads the head's mail without extracting it.
 304:core/inc/kapi.h ****  * @param kobj		   Mail Queue address.
 305:core/inc/kapi.h ****  * @param peekPPtr	   Pointer to receive address.
 306:core/inc/kapi.h ****  * @return			   RK_SUCCESS or specific error.
 307:core/inc/kapi.h ****  */
 308:core/inc/kapi.h **** RK_ERR kQueuePeek( RK_QUEUE *const kobj, VOID **peekPPtr);
 309:core/inc/kapi.h **** 
 310:core/inc/kapi.h **** #endif
 311:core/inc/kapi.h **** 
 312:core/inc/kapi.h **** #if (RK_CONF_FUNC_QUEUE_QUERY==ON)
 313:core/inc/kapi.h **** /**
 314:core/inc/kapi.h ****  * @brief			Gets the current number of mails within a queue.
 315:core/inc/kapi.h ****  * @param kobj      Mail Queue address.
 316:core/inc/kapi.h ****  * @return			Number of mails.
 317:core/inc/kapi.h ****  */
 318:core/inc/kapi.h **** ULONG kQueueQuery( RK_QUEUE *const kobj);
 319:core/inc/kapi.h **** 
 320:core/inc/kapi.h **** #endif
 321:core/inc/kapi.h **** #if (RK_CONF_FUNC_QUEUE_JAM==ON)
 322:core/inc/kapi.h **** 
 323:core/inc/kapi.h **** /**
 324:core/inc/kapi.h ****  * @brief            Sends a message to the queue front.
 325:core/inc/kapi.h ****  * @param kobj       Queue address
 326:core/inc/kapi.h ****  * @param sendPtr    Message address
 327:core/inc/kapi.h ****  * @param timeout    Suspension time
 328:core/inc/kapi.h ****  * @return           RK_SUCCESS or specific error
 329:core/inc/kapi.h ****  */
 330:core/inc/kapi.h **** RK_ERR kQueueJam( RK_QUEUE *const kobj, VOID *sendPtr, RK_TICK timeout);
 331:core/inc/kapi.h **** 
 332:core/inc/kapi.h **** #endif
ARM GAS  /var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s 			page 10


 333:core/inc/kapi.h **** #endif /* MAIL QUEUE  */
 334:core/inc/kapi.h **** 
 335:core/inc/kapi.h **** #if (RK_CONF_STREAM == ON)
 336:core/inc/kapi.h **** 
 337:core/inc/kapi.h **** /******************************************************************************/
 338:core/inc/kapi.h **** /* STREAM QUEUE                                                               */
 339:core/inc/kapi.h **** /******************************************************************************/
 340:core/inc/kapi.h **** 
 341:core/inc/kapi.h **** /**
 342:core/inc/kapi.h ****  * @brief 					 Initialise a Stream MessageQueue
 343:core/inc/kapi.h ****  * @param kobj			  	 Stream Queue address
 344:core/inc/kapi.h ****  * @param buffer		 	 Allocated memory.
 345:core/inc/kapi.h ****  * @param mesgSizeInWords 	 Message size (min=1WORD)
 346:core/inc/kapi.h ****  * @param nMesg  			 Max number of messages
 347:core/inc/kapi.h ****  * @return 					 RK_SUCCESS or specific errors
 348:core/inc/kapi.h ****  */
 349:core/inc/kapi.h **** RK_ERR kStreamInit( RK_STREAM *const kobj, VOID *buf,
 350:core/inc/kapi.h **** 		const ULONG mesgSizeInWords, const ULONG nMesg);
 351:core/inc/kapi.h **** 
 352:core/inc/kapi.h **** /**
 353:core/inc/kapi.h ****  * @brief            Assigns a task owner for the stream queue
 354:core/inc/kapi.h ****  * @param kobj       Stream Queue address
 355:core/inc/kapi.h ****  * @param taskHandle Task Handle
 356:core/inc/kapi.h ****  * @return           RK_SUCCESS or specific error.
 357:core/inc/kapi.h ****  */
 358:core/inc/kapi.h **** RK_ERR kStreamSetOwner( RK_STREAM *const kobj, const RK_TASK_HANDLE taskHandle);
 359:core/inc/kapi.h **** 
 360:core/inc/kapi.h **** #if (RK_CONF_FUNC_STREAM_QUERY==ON)
 361:core/inc/kapi.h **** 
 362:core/inc/kapi.h **** /**
 363:core/inc/kapi.h ****  * @brief 			Get the current number of messages within a message queue.
 364:core/inc/kapi.h ****  * @param kobj		(Stream) Queue address
 365:core/inc/kapi.h ****  * @param mesgCntPtr Address to store the message number
 366:core/inc/kapi.h ****  * @return			RK_SUCCESS or a specific error.
 367:core/inc/kapi.h ****  */
 368:core/inc/kapi.h **** 
 369:core/inc/kapi.h **** ULONG kStreamQuery( RK_STREAM *const kobj);
 370:core/inc/kapi.h **** 
 371:core/inc/kapi.h **** #endif
 372:core/inc/kapi.h **** 
 373:core/inc/kapi.h **** #if (RK_CONF_FUNC_STREAM_JAM == ON)
 374:core/inc/kapi.h **** 
 375:core/inc/kapi.h **** /**
 376:core/inc/kapi.h ****  * @brief 			Sends a message to the queue front.
 377:core/inc/kapi.h ****  * @param kobj		(Stream) Queue address
 378:core/inc/kapi.h ****  * @param sendPtr	Message address
 379:core/inc/kapi.h ****  * @param timeout	Suspension time
 380:core/inc/kapi.h ****  * @return			RK_SUCCESS or specific error
 381:core/inc/kapi.h ****  */
 382:core/inc/kapi.h **** RK_ERR kStreamJam( RK_STREAM *const kobj, VOID *sendPtr,
 383:core/inc/kapi.h **** 		const RK_TICK timeout);
 384:core/inc/kapi.h **** 
 385:core/inc/kapi.h **** #endif
 386:core/inc/kapi.h **** 
 387:core/inc/kapi.h **** /**
 388:core/inc/kapi.h ****  * @brief 			Receive a message from the queue
 389:core/inc/kapi.h ****  * @param kobj		Queue address
ARM GAS  /var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s 			page 11


 390:core/inc/kapi.h ****  * @param recvPtr	Receiving address
 391:core/inc/kapi.h ****  * @param timeout	Suspension time
 392:core/inc/kapi.h **** *  @return			RK_SUCCESS or specific error.
 393:core/inc/kapi.h ****  */
 394:core/inc/kapi.h **** RK_ERR kStreamRecv( RK_STREAM *const kobj, VOID *recvPtr, const RK_TICK timeout);
 395:core/inc/kapi.h **** 
 396:core/inc/kapi.h **** /**
 397:core/inc/kapi.h ****  * @brief 			Send a message to a message queue
 398:core/inc/kapi.h ****  * @param kobj		Queue address
 399:core/inc/kapi.h ****  * @param sendPtr	Message address
 400:core/inc/kapi.h ****  * @param timeout	Suspension time
 401:core/inc/kapi.h **** *  @return				RK_SUCCESS or specific error.
 402:core/inc/kapi.h ****  */
 403:core/inc/kapi.h **** RK_ERR kStreamSend( RK_STREAM *const kobj, VOID *sendPtr,
 404:core/inc/kapi.h **** 		const RK_TICK timeout);
 405:core/inc/kapi.h **** 
 406:core/inc/kapi.h **** #if (RK_CONF_FUNC_STREAM_PEEK==ON)
 407:core/inc/kapi.h **** 
 408:core/inc/kapi.h **** /**
 409:core/inc/kapi.h ****  * @brief 			Receive the front message of a queue
 410:core/inc/kapi.h ****  *					without changing its state
 411:core/inc/kapi.h ****  * @param kobj		(Stream) Queue object address
 412:core/inc/kapi.h ****  * @param recvPtr		Receiving pointer address
 413:core/inc/kapi.h ****  * @return			RK_SUCCESS or error.
 414:core/inc/kapi.h ****  */
 415:core/inc/kapi.h **** RK_ERR kStreamPeek( RK_STREAM *const kobj, VOID ** recvPtr);
 416:core/inc/kapi.h **** 
 417:core/inc/kapi.h **** #endif
 418:core/inc/kapi.h **** 
 419:core/inc/kapi.h **** #endif /*RK_CONF_STREAM*/
 420:core/inc/kapi.h **** 
 421:core/inc/kapi.h **** /******************************************************************************/
 422:core/inc/kapi.h **** /* TASK SIGNAL FLAGS                                                          */
 423:core/inc/kapi.h **** /******************************************************************************//**
 424:core/inc/kapi.h ****  * @brief				A task pends on its own event flags
 425:core/inc/kapi.h ****  * @param required		Combination of required flags (bitstring, non-zero)
 426:core/inc/kapi.h ****  * @param options 		RK_FLAGS_ANY or RK_FLAGS_ALL
 427:core/inc/kapi.h ****  * @param gotFlagsPtr	Pointer to store the flags when returning (opt. NULL)
 428:core/inc/kapi.h ****  * @param timeout  		Suspension timeout, in case required flags are not met
 429:core/inc/kapi.h ****  * @return 				RK_SUCCESS, RK_ERR_FLAGS_NOT_MET or specific error
 430:core/inc/kapi.h ****  */
 431:core/inc/kapi.h **** RK_ERR kSignalGet( ULONG const required, UINT const options, ULONG *const gotFlagsPtr,
 432:core/inc/kapi.h **** 	 RK_TICK const timeout);
 433:core/inc/kapi.h **** 
 434:core/inc/kapi.h **** #define kSignalWait (r, p, o, t) kSignalGet(r, p, o, t) 
 435:core/inc/kapi.h **** 
 436:core/inc/kapi.h **** /**
 437:core/inc/kapi.h ****  * @brief 				Post a combination of flags to a task
 438:core/inc/kapi.h ****  * @param taskHandle 	Receiver Task handle
 439:core/inc/kapi.h ****  * @param mask 			Bitmask to signal (non-zero)
 440:core/inc/kapi.h ****  * @return 				RK_SUCCESS or specific error
 441:core/inc/kapi.h ****  */
 442:core/inc/kapi.h **** RK_ERR kSignalSet( RK_TASK_HANDLE const taskHandle, ULONG const mask);
 443:core/inc/kapi.h **** 
 444:core/inc/kapi.h **** /**
 445:core/inc/kapi.h ****  * @brief 				Reads caller task flags
 446:core/inc/kapi.h ****  * @param taskHandle 	Target task
ARM GAS  /var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s 			page 12


 447:core/inc/kapi.h ****  * @param gotFlagsPtr 	Pointer to store the current flags
 448:core/inc/kapi.h ****  * @return				RK_SUCCESS or specific error.
 449:core/inc/kapi.h ****  */
 450:core/inc/kapi.h **** RK_ERR kSignalQuery( ULONG *const gotFlagsPtr);
 451:core/inc/kapi.h **** 
 452:core/inc/kapi.h **** /**
 453:core/inc/kapi.h ****  * @brief Clears the caller task flags
 454:core/inc/kapi.h ****  * @return RK_SUCCESS or specific error
 455:core/inc/kapi.h ****  */
 456:core/inc/kapi.h **** RK_ERR kSignalClear( VOID);
 457:core/inc/kapi.h **** 
 458:core/inc/kapi.h **** 
 459:core/inc/kapi.h **** /******************************************************************************/
 460:core/inc/kapi.h **** /* EVENTS (SLEEP/WAKE/SIGNAL)                                                 */
 461:core/inc/kapi.h **** /******************************************************************************/
 462:core/inc/kapi.h **** #if (RK_CONF_EVENT==ON)
 463:core/inc/kapi.h **** /**
 464:core/inc/kapi.h ****  * @brief 			Initialise an event
 465:core/inc/kapi.h ****  * @param kobj		Pointer to RK_EVENT object
 466:core/inc/kapi.h ****  * @return			RK_SUCCESS/error
 467:core/inc/kapi.h ****  */
 468:core/inc/kapi.h **** RK_ERR kEventInit( RK_EVENT *const kobj);
 469:core/inc/kapi.h **** /**
 470:core/inc/kapi.h ****  * @brief 			Suspends a task waiting for a wake signal
 471:core/inc/kapi.h ****  * @param kobj 		Pointer to a RK_EVENT object
 472:core/inc/kapi.h ****  * @param timeout	Suspension time.
 473:core/inc/kapi.h ****  * @return				RK_SUCCESS or specific error.
 474:core/inc/kapi.h ****  */
 475:core/inc/kapi.h **** RK_ERR kEventSleep( RK_EVENT *const kobj, const RK_TICK timeout);
 476:core/inc/kapi.h **** 
 477:core/inc/kapi.h **** /**
 478:core/inc/kapi.h ****  * @brief 		Wakes all tasks sleeping for a specific event
 479:core/inc/kapi.h ****  * @param kobj 	Pointer to a RK_EVENT object
 480:core/inc/kapi.h ****  * @return 		RK_SUCCESS or specific error
 481:core/inc/kapi.h ****  */
 482:core/inc/kapi.h **** RK_ERR kEventWake( RK_EVENT *const kobj);
 483:core/inc/kapi.h **** 
 484:core/inc/kapi.h **** /**
 485:core/inc/kapi.h ****  * @brief 		Wakes a single task sleeping for a specific event
 486:core/inc/kapi.h ****  *        		(by priority)
 487:core/inc/kapi.h ****  * @param kobj 	Pointer to a RK_EVENT object
 488:core/inc/kapi.h ****  * @return 		RK_SUCCESS or specific error
 489:core/inc/kapi.h ****  */
 490:core/inc/kapi.h **** RK_ERR kEventSignal( RK_EVENT *const kobj);
 491:core/inc/kapi.h **** 
 492:core/inc/kapi.h **** /**
 493:core/inc/kapi.h ****  * @brief  Return the number of tasks sleeping on an event.
 494:core/inc/kapi.h ****  * @return Number of sleeping tasks;
 495:core/inc/kapi.h ****  */
 496:core/inc/kapi.h **** UINT kEventQuery( RK_EVENT *const kobj);
 497:core/inc/kapi.h **** 
 498:core/inc/kapi.h **** #endif
 499:core/inc/kapi.h **** 
 500:core/inc/kapi.h **** #if (RK_CONF_CALLOUT_TIMER==ON)
 501:core/inc/kapi.h **** /******************************************************************************/
 502:core/inc/kapi.h **** /* APPLICATION TIMER                                                          */
 503:core/inc/kapi.h **** /******************************************************************************/
ARM GAS  /var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s 			page 13


 504:core/inc/kapi.h **** /**
 505:core/inc/kapi.h ****  * @brief Initialises an application timer
 506:core/inc/kapi.h ****  * @param kobj  Timer Object address
 507:core/inc/kapi.h ****  * @param phase Initial phase delay (does not applied on reload)
 508:core/inc/kapi.h ****  * @param countTicks Time until it expires in ticks
 509:core/inc/kapi.h ****  * @param funPtr Callout Function when it expires (callback)
 510:core/inc/kapi.h ****  * @param argsPtr Generic pointer to callout arguments
 511:core/inc/kapi.h ****  * @param reload TRUE for reloading after timer-out. FALSE for an one-shot
 512:core/inc/kapi.h ****  * @return		 RK_SUCCESS or specific error.
 513:core/inc/kapi.h ****  */
 514:core/inc/kapi.h **** RK_ERR kTimerInit( RK_TIMER *const kobj, const RK_TICK phase,
 515:core/inc/kapi.h **** 		const RK_TICK countTicks, const RK_TIMER_CALLOUT funPtr,
 516:core/inc/kapi.h **** 		VOID *argsPtr, const BOOL reload);
 517:core/inc/kapi.h **** 
 518:core/inc/kapi.h **** /**
 519:core/inc/kapi.h ****  * @brief 		Cancel an active timer
 520:core/inc/kapi.h ****  * @param kobj  Timer object address
 521:core/inc/kapi.h ****  * @return 		RK_SUCCESS, RK_ERR_OBJ_NULL, 
 522:core/inc/kapi.h ****  * 		   		RK_ERROR if invalid Timer object
 523:core/inc/kapi.h ****  * 		   		(e.g., a timer already cancelled) 
 524:core/inc/kapi.h ****  */
 525:core/inc/kapi.h **** RK_ERR kTimerCancel( RK_TIMER *const kobj);
 526:core/inc/kapi.h **** #endif
 527:core/inc/kapi.h **** 
 528:core/inc/kapi.h **** /******************************************************************************/
 529:core/inc/kapi.h **** /* SLEEP AND OTHER TIME RELATED                                               */
 530:core/inc/kapi.h **** /******************************************************************************/
 531:core/inc/kapi.h **** /**
 532:core/inc/kapi.h ****  * @brief 		Put the current task to sleep for a number of ticks.
 533:core/inc/kapi.h ****  *        		Task switches to SLEEPING state.
 534:core/inc/kapi.h ****  * @param ticks Number of ticks to sleep
 535:core/inc/kapi.h ****  * @return 		RK_SUCCESS or specific error
 536:core/inc/kapi.h ****  */
 537:core/inc/kapi.h **** RK_ERR kSleep( const RK_TICK ticks);
 538:core/inc/kapi.h **** 
 539:core/inc/kapi.h **** #if (RK_CONF_SCH_TSLICE==OFF)
 540:core/inc/kapi.h **** 
 541:core/inc/kapi.h **** /**
 542:core/inc/kapi.h ****  * @brief	Sleep for an absolute period of time adjusting for
 543:core/inc/kapi.h ****  * 			eventual jitters, suitable for periodic tasks.
 544:core/inc/kapi.h ****  * @return				RK_SUCCESS or specific error.
 545:core/inc/kapi.h ****  */
 546:core/inc/kapi.h **** RK_ERR kSleepUntil( RK_TICK period);
 547:core/inc/kapi.h **** 
 548:core/inc/kapi.h **** #endif
 549:core/inc/kapi.h **** /**
 550:core/inc/kapi.h ****  * @brief Gets the current number of  ticks
 551:core/inc/kapi.h ****  * @return Global system tick value
 552:core/inc/kapi.h ****  */
 553:core/inc/kapi.h **** RK_TICK kTickGet( VOID);
 554:core/inc/kapi.h **** 
 555:core/inc/kapi.h **** /******************************************************************************/
 556:core/inc/kapi.h **** /* MEMORY POOL (ALLOCATOR)                                                    */
 557:core/inc/kapi.h **** /******************************************************************************/
 558:core/inc/kapi.h **** /**
 559:core/inc/kapi.h ****  * @brief Memory Pool Control Block Initialisation
 560:core/inc/kapi.h ****  * @param kobj Pointer to a pool control block
ARM GAS  /var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s 			page 14


 561:core/inc/kapi.h ****  * @param memPoolPtr Address of a pool (typically an array) @
 562:core/inc/kapi.h ****   * 		  of objects to be handled
 563:core/inc/kapi.h ****  * @param blkSize Size of each block in bytes
 564:core/inc/kapi.h ****  * @param numBlocks Number of blocks
 565:core/inc/kapi.h ****  * @return				RK_SUCCESS or specific error.
 566:core/inc/kapi.h ****  */
 567:core/inc/kapi.h **** RK_ERR kMemInit( RK_MEM *const kobj, VOID *memPoolPtr, ULONG blkSize,
 568:core/inc/kapi.h **** 		const ULONG numBlocks);
 569:core/inc/kapi.h **** 
 570:core/inc/kapi.h **** /**
 571:core/inc/kapi.h ****  * @brief Allocate memory from a block pool
 572:core/inc/kapi.h ****  * @param kobj Pointer to the block pool
 573:core/inc/kapi.h ****  * @return Pointer to the allocated block, or NULL on failure
 574:core/inc/kapi.h ****  */
 575:core/inc/kapi.h **** VOID *kMemAlloc( RK_MEM *const kobj);
 576:core/inc/kapi.h **** 
 577:core/inc/kapi.h **** /**
 578:core/inc/kapi.h ****  * @brief Free a memory block back to the block pool
 579:core/inc/kapi.h ****  * @param kobj Pointer to the block pool
 580:core/inc/kapi.h ****  * @param blockPtr Pointer to the block to free
 581:core/inc/kapi.h ****  * @return				RK_SUCCESS or specific error.
 582:core/inc/kapi.h ****  */
 583:core/inc/kapi.h **** RK_ERR kMemFree( RK_MEM *const kobj, VOID *blockPtr);
 584:core/inc/kapi.h **** 
 585:core/inc/kapi.h **** /******************************************************************************/
 586:core/inc/kapi.h **** /* MOST-RECENT MESSAGE PROTOCOL                                               */
 587:core/inc/kapi.h **** /******************************************************************************/
 588:core/inc/kapi.h **** #if (RK_CONF_MRM==ON)
 589:core/inc/kapi.h **** /**
 590:core/inc/kapi.h ****  * @brief			 	Initialise a MRM Control Block
 591:core/inc/kapi.h ****  * @param kobj 			Pointer to a MRM Control Block
 592:core/inc/kapi.h ****  * @param mrmPoolPtr  	Pool of MRM buffers
 593:core/inc/kapi.h ****  * @param mesgPoolPtr 	Pool of message buffers (to be attached to a MRM Buffer)
 594:core/inc/kapi.h ****  * @param nBufs 		Number of MRM Buffers (that is the same as the number of messages)
 595:core/inc/kapi.h ****  * @param dataSizeWords Size of a Messsage within a MRM (in WORDS)
 596:core/inc/kapi.h ****  * @return				RK_SUCCESS or specific error.
 597:core/inc/kapi.h ****  */
 598:core/inc/kapi.h **** RK_ERR kMRMInit( RK_MRM *const kobj, RK_MRM_BUF *const mrmPoolPtr,
 599:core/inc/kapi.h **** 		VOID *mesgPoolPtr, ULONG const nBufs, ULONG const dataSizeWords);
 600:core/inc/kapi.h **** 
 601:core/inc/kapi.h **** /**
 602:core/inc/kapi.h ****  * @brief		Reserves a MRM Buffer to be written
 603:core/inc/kapi.h ****  * @param kobj	Pointer to a MRM Control Block
 604:core/inc/kapi.h ****  * @return 		Pointer to a MRM Buffer
 605:core/inc/kapi.h ****  */
 606:core/inc/kapi.h **** RK_MRM_BUF* kMRMReserve( RK_MRM *const kobj);
 607:core/inc/kapi.h **** 
 608:core/inc/kapi.h **** /**
 609:core/inc/kapi.h ****  * @brief 			Copies a message into a MRM and makes it the most recent message.
 610:core/inc/kapi.h ****  * @param kobj      Pointer to a MRM Control Block
 611:core/inc/kapi.h ****  * @param bufPtr    Pointer to a MRM Buffer
 612:core/inc/kapi.h ****  * @param dataPtr   Pointer to the message to be published.
 613:core/inc/kapi.h ****  * @return 			RK_SUCCESS or specific error
 614:core/inc/kapi.h ****  */
 615:core/inc/kapi.h **** RK_ERR kMRMPublish( RK_MRM *const kobj, RK_MRM_BUF *const bufPtr, VOID *dataPtr);
 616:core/inc/kapi.h **** 
 617:core/inc/kapi.h **** /**
ARM GAS  /var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s 			page 15


 618:core/inc/kapi.h ****  * @brief 			Receives the most recent published message within a MRM Block.
 619:core/inc/kapi.h ****  * @param kobj      Pointer to a MRM Control Block
 620:core/inc/kapi.h ****  * @param dataPtr   Pointer to where the message will be copied.
 621:core/inc/kapi.h ****  * @return 			Pointer to the MRM from which message was retrieved
 622:core/inc/kapi.h ****  *        		    (to be used afterwards on kMRMUnget()).
 623:core/inc/kapi.h ****  */
 624:core/inc/kapi.h **** RK_MRM_BUF* kMRMGet( RK_MRM *const kobj, VOID *getMesgPtr);
 625:core/inc/kapi.h **** 
 626:core/inc/kapi.h **** /**
 627:core/inc/kapi.h ****  * @brief 			Releases a MRM Buffer which message has been consumed.
 628:core/inc/kapi.h ****  * @param kobj      Pointer to a MRM Control Block
 629:core/inc/kapi.h ****  * @param bufPtr    Pointer to the MRM Buffer (returned by kMRMGet())
 630:core/inc/kapi.h ****  * @return 			RK_SUCCESS or specific error
 631:core/inc/kapi.h ****  */
 632:core/inc/kapi.h **** RK_ERR kMRMUnget( RK_MRM *const kobj, RK_MRM_BUF *const bufPtr);
 633:core/inc/kapi.h **** 
 634:core/inc/kapi.h **** #endif
 635:core/inc/kapi.h **** /******************************************************************************/
 636:core/inc/kapi.h **** /* MISC/HELPERS                                                               */
 637:core/inc/kapi.h **** /******************************************************************************/
 638:core/inc/kapi.h **** /**
 639:core/inc/kapi.h ****  * @brief Returns the kernel version.
 640:core/inc/kapi.h ****  * @return Kernel version as an unsigned integer.
 641:core/inc/kapi.h ****  */
 642:core/inc/kapi.h **** unsigned int kGetVersion( void);
 643:core/inc/kapi.h **** 
 644:core/inc/kapi.h **** #if !defined(UNUSED)
 645:core/inc/kapi.h **** #define UNUSED(x) (void)x
 646:core/inc/kapi.h **** #endif
 647:core/inc/kapi.h **** 
 648:core/inc/kapi.h **** /* Running Task Get */
 649:core/inc/kapi.h **** extern RK_TCB *runPtr;
 650:core/inc/kapi.h **** #define RK_RUNNING_PID (runPtr->pid)
 651:core/inc/kapi.h **** #define RK_RUNNING_PRIO (runPtr->priority)
 652:core/inc/kapi.h **** #define RK_RUNNING_HANDLE (runPtr)
 653:core/inc/kapi.h **** /* Get PID from task handle */
 654:core/inc/kapi.h **** #define RK_GET_TASK_PID(taskHandle) (taskHandle->pid)
 655:core/inc/kapi.h **** 
 656:core/inc/kapi.h **** /* Enable/Disable global interrupts */
 657:core/inc/kapi.h **** /* Note: use this on application-level only.
 658:core/inc/kapi.h ****  * If tweaking kernel code, look at RK_CR_*
 659:core/inc/kapi.h ****  * system macros.
 660:core/inc/kapi.h ****  */
 661:core/inc/kapi.h **** __attribute__((always_inline))
 662:core/inc/kapi.h **** static inline VOID kDisableIRQ( VOID)
 129              		.loc 2 662 20 view .LVU21
 130              	.LBB7:
 663:core/inc/kapi.h **** {
 664:core/inc/kapi.h **** 	__ASM volatile ("CPSID I" : : : "memory");
 131              		.loc 2 664 2 view .LVU22
 132              		.syntax unified
 133              	@ 664 "core/inc/kapi.h" 1
 134 001a 72B6     		CPSID I
 135              	@ 0 "" 2
 136              		.thumb
 137              		.syntax unified
 138              	.LBE7:
ARM GAS  /var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s 			page 16


 139              	.LBE6:
  54:app/armv7m/src/application.c **** 		kMutexUnlock(&syncMutex);
 140              		.loc 1 54 3 view .LVU23
 141 001c 0E4C     		ldr	r4, .L12
 142 001e 2046     		mov	r0, r4
 143 0020 FFF7FEFF 		bl	kMutexUnlock
 144              	.LVL6:
  55:app/armv7m/src/application.c **** 		kEventSleep(&syncEvent, RK_WAIT_FOREVER);
 145              		.loc 1 55 3 view .LVU24
 146 0024 4FF0FF31 		mov	r1, #-1
 147 0028 0D48     		ldr	r0, .L12+8
 148 002a FFF7FEFF 		bl	kEventSleep
 149              	.LVL7:
  56:app/armv7m/src/application.c **** 		kEnableIRQ();
 150              		.loc 1 56 3 view .LVU25
 151              	.LBB8:
 152              	.LBI8:
 665:core/inc/kapi.h **** }
 666:core/inc/kapi.h **** 
 667:core/inc/kapi.h **** __attribute__((always_inline))
 668:core/inc/kapi.h **** static inline VOID kEnableIRQ( VOID)
 153              		.loc 2 668 20 view .LVU26
 154              	.LBB9:
 669:core/inc/kapi.h **** {
 670:core/inc/kapi.h **** 	__ASM volatile ("CPSIE I" : : : "memory");
 155              		.loc 2 670 2 view .LVU27
 156              		.syntax unified
 157              	@ 670 "core/inc/kapi.h" 1
 158 002e 62B6     		CPSIE I
 159              	@ 0 "" 2
 160              		.thumb
 161              		.syntax unified
 162              	.LBE9:
 163              	.LBE8:
  57:app/armv7m/src/application.c ****         kMutexLock(&syncMutex, RK_NO_INHERIT, RK_WAIT_FOREVER);
 164              		.loc 1 57 9 view .LVU28
 165 0030 4FF0FF32 		mov	r2, #-1
 166 0034 0021     		movs	r1, #0
 167 0036 2046     		mov	r0, r4
 168 0038 FFF7FEFF 		bl	kMutexLock
 169              	.LVL8:
 170              	.L10:
  58:app/armv7m/src/application.c **** 	}
  59:app/armv7m/src/application.c **** 	else
  60:app/armv7m/src/application.c **** 	{
  61:app/armv7m/src/application.c ****         kPuts("All task synch'd.\n\r");
  62:app/armv7m/src/application.c ****         syncCounter = 0;
  63:app/armv7m/src/application.c **** 		kEventWake(&syncEvent);
  64:app/armv7m/src/application.c **** 	
  65:app/armv7m/src/application.c ****     }
  66:app/armv7m/src/application.c ****     kMutexUnlock(&syncMutex);
 171              		.loc 1 66 5 view .LVU29
 172 003c 0648     		ldr	r0, .L12
 173 003e FFF7FEFF 		bl	kMutexUnlock
 174              	.LVL9:
  67:app/armv7m/src/application.c **** }
 175              		.loc 1 67 1 is_stmt 0 view .LVU30
ARM GAS  /var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s 			page 17


 176 0042 10BD     		pop	{r4, pc}
 177              	.L9:
  61:app/armv7m/src/application.c ****         syncCounter = 0;
 178              		.loc 1 61 9 is_stmt 1 view .LVU31
 179 0044 0748     		ldr	r0, .L12+12
 180 0046 FFF7FEFF 		bl	kPuts
 181              	.LVL10:
  62:app/armv7m/src/application.c **** 		kEventWake(&syncEvent);
 182              		.loc 1 62 9 view .LVU32
  62:app/armv7m/src/application.c **** 		kEventWake(&syncEvent);
 183              		.loc 1 62 21 is_stmt 0 view .LVU33
 184 004a 044B     		ldr	r3, .L12+4
 185 004c 0022     		movs	r2, #0
 186 004e 1A60     		str	r2, [r3]
  63:app/armv7m/src/application.c **** 	
 187              		.loc 1 63 3 is_stmt 1 view .LVU34
 188 0050 0348     		ldr	r0, .L12+8
 189 0052 FFF7FEFF 		bl	kEventWake
 190              	.LVL11:
 191 0056 F1E7     		b	.L10
 192              	.L13:
 193              		.align	2
 194              	.L12:
 195 0058 00000000 		.word	syncMutex
 196 005c 00000000 		.word	syncCounter
 197 0060 00000000 		.word	syncEvent
 198 0064 00000000 		.word	.LC0
 199              		.cfi_endproc
 200              	.LFE59:
 202              		.section	.text.kApplicationInit,"ax",%progbits
 203              		.align	1
 204              		.global	kApplicationInit
 205              		.syntax unified
 206              		.thumb
 207              		.thumb_func
 209              	kApplicationInit:
 210              	.LFB58:
  38:app/armv7m/src/application.c **** 	kMutexInit(&syncMutex);
 211              		.loc 1 38 1 view -0
 212              		.cfi_startproc
 213              		@ args = 0, pretend = 0, frame = 0
 214              		@ frame_needed = 0, uses_anonymous_args = 0
 215 0000 08B5     		push	{r3, lr}
 216              		.cfi_def_cfa_offset 8
 217              		.cfi_offset 3, -8
 218              		.cfi_offset 14, -4
  39:app/armv7m/src/application.c **** 	kEventInit(&syncEvent);
 219              		.loc 1 39 2 view .LVU36
 220 0002 0548     		ldr	r0, .L16
 221 0004 FFF7FEFF 		bl	kMutexInit
 222              	.LVL12:
  40:app/armv7m/src/application.c **** 	syncCounter = 0;
 223              		.loc 1 40 2 view .LVU37
 224 0008 0448     		ldr	r0, .L16+4
 225 000a FFF7FEFF 		bl	kEventInit
 226              	.LVL13:
  41:app/armv7m/src/application.c **** }
ARM GAS  /var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s 			page 18


 227              		.loc 1 41 2 view .LVU38
  41:app/armv7m/src/application.c **** }
 228              		.loc 1 41 14 is_stmt 0 view .LVU39
 229 000e 044B     		ldr	r3, .L16+8
 230 0010 0022     		movs	r2, #0
 231 0012 1A60     		str	r2, [r3]
  42:app/armv7m/src/application.c **** /* only one task can be active within a monitor
 232              		.loc 1 42 1 view .LVU40
 233 0014 08BD     		pop	{r3, pc}
 234              	.L17:
 235 0016 00BF     		.align	2
 236              	.L16:
 237 0018 00000000 		.word	syncMutex
 238 001c 00000000 		.word	syncEvent
 239 0020 00000000 		.word	syncCounter
 240              		.cfi_endproc
 241              	.LFE58:
 243              		.section	.rodata.Task1.str1.4,"aMS",%progbits,1
 244              		.align	2
 245              	.LC1:
 246 0000 5461736B 		.ascii	"Task 1 is synching...\012\015\000"
 246      20312069 
 246      73207379 
 246      6E636869 
 246      6E672E2E 
 247              		.section	.text.Task1,"ax",%progbits
 248              		.align	1
 249              		.global	Task1
 250              		.syntax unified
 251              		.thumb
 252              		.thumb_func
 254              	Task1:
 255              	.LFB60:
  68:app/armv7m/src/application.c **** 
  69:app/armv7m/src/application.c **** VOID Task1(VOID* args)
  70:app/armv7m/src/application.c **** {
 256              		.loc 1 70 1 is_stmt 1 view -0
 257              		.cfi_startproc
 258              		@ Volatile: function does not return.
 259              		@ args = 0, pretend = 0, frame = 0
 260              		@ frame_needed = 0, uses_anonymous_args = 0
 261              	.LVL14:
 262              		.loc 1 70 1 is_stmt 0 view .LVU42
 263 0000 08B5     		push	{r3, lr}
 264              		.cfi_def_cfa_offset 8
 265              		.cfi_offset 3, -8
 266              		.cfi_offset 14, -4
 267              	.LVL15:
 268              	.L19:
  71:app/armv7m/src/application.c ****        RK_UNUSEARGS
 269              		.loc 1 71 8 is_stmt 1 discriminator 1 view .LVU43
  72:app/armv7m/src/application.c **** 	while (1)
 270              		.loc 1 72 2 discriminator 1 view .LVU44
  73:app/armv7m/src/application.c **** 	{
  74:app/armv7m/src/application.c **** 		kSleep(4);
 271              		.loc 1 74 3 discriminator 1 view .LVU45
 272 0002 0420     		movs	r0, #4
ARM GAS  /var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s 			page 19


 273 0004 FFF7FEFF 		bl	kSleep
 274              	.LVL16:
  75:app/armv7m/src/application.c ****         kPuts("Task 1 is synching...\n\r");
 275              		.loc 1 75 9 discriminator 1 view .LVU46
 276 0008 0248     		ldr	r0, .L21
 277 000a FFF7FEFF 		bl	kPuts
 278              	.LVL17:
  76:app/armv7m/src/application.c **** 		synch();
 279              		.loc 1 76 3 discriminator 1 view .LVU47
 280 000e FFF7FEFF 		bl	synch
 281              	.LVL18:
  72:app/armv7m/src/application.c **** 	{
 282              		.loc 1 72 8 discriminator 1 view .LVU48
 283 0012 F6E7     		b	.L19
 284              	.L22:
 285              		.align	2
 286              	.L21:
 287 0014 00000000 		.word	.LC1
 288              		.cfi_endproc
 289              	.LFE60:
 291              		.section	.rodata.Task2.str1.4,"aMS",%progbits,1
 292              		.align	2
 293              	.LC2:
 294 0000 5461736B 		.ascii	"Task 2 is synching...\012\015\000"
 294      20322069 
 294      73207379 
 294      6E636869 
 294      6E672E2E 
 295              		.section	.text.Task2,"ax",%progbits
 296              		.align	1
 297              		.global	Task2
 298              		.syntax unified
 299              		.thumb
 300              		.thumb_func
 302              	Task2:
 303              	.LFB61:
  77:app/armv7m/src/application.c ****         
  78:app/armv7m/src/application.c **** 	}
  79:app/armv7m/src/application.c **** }
  80:app/armv7m/src/application.c **** VOID Task2(VOID* args)
  81:app/armv7m/src/application.c **** {
 304              		.loc 1 81 1 view -0
 305              		.cfi_startproc
 306              		@ Volatile: function does not return.
 307              		@ args = 0, pretend = 0, frame = 0
 308              		@ frame_needed = 0, uses_anonymous_args = 0
 309              	.LVL19:
 310              		.loc 1 81 1 is_stmt 0 view .LVU50
 311 0000 08B5     		push	{r3, lr}
 312              		.cfi_def_cfa_offset 8
 313              		.cfi_offset 3, -8
 314              		.cfi_offset 14, -4
 315              	.LVL20:
 316              	.L24:
  82:app/armv7m/src/application.c ****     RK_UNUSEARGS
 317              		.loc 1 82 5 is_stmt 1 discriminator 1 view .LVU51
  83:app/armv7m/src/application.c **** 	while (1)
ARM GAS  /var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s 			page 20


 318              		.loc 1 83 2 discriminator 1 view .LVU52
  84:app/armv7m/src/application.c **** 	{
  85:app/armv7m/src/application.c **** 		kSleep(8);
 319              		.loc 1 85 3 discriminator 1 view .LVU53
 320 0002 0820     		movs	r0, #8
 321 0004 FFF7FEFF 		bl	kSleep
 322              	.LVL21:
  86:app/armv7m/src/application.c ****         kPuts("Task 2 is synching...\n\r");
 323              		.loc 1 86 9 discriminator 1 view .LVU54
 324 0008 0248     		ldr	r0, .L26
 325 000a FFF7FEFF 		bl	kPuts
 326              	.LVL22:
  87:app/armv7m/src/application.c **** 		synch();
 327              		.loc 1 87 3 discriminator 1 view .LVU55
 328 000e FFF7FEFF 		bl	synch
 329              	.LVL23:
  83:app/armv7m/src/application.c **** 	{
 330              		.loc 1 83 8 discriminator 1 view .LVU56
 331 0012 F6E7     		b	.L24
 332              	.L27:
 333              		.align	2
 334              	.L26:
 335 0014 00000000 		.word	.LC2
 336              		.cfi_endproc
 337              	.LFE61:
 339              		.section	.rodata.Task3.str1.4,"aMS",%progbits,1
 340              		.align	2
 341              	.LC3:
 342 0000 5461736B 		.ascii	"Task 3 is synching...\012\015\000"
 342      20332069 
 342      73207379 
 342      6E636869 
 342      6E672E2E 
 343              		.section	.text.Task3,"ax",%progbits
 344              		.align	1
 345              		.global	Task3
 346              		.syntax unified
 347              		.thumb
 348              		.thumb_func
 350              	Task3:
 351              	.LFB62:
  88:app/armv7m/src/application.c **** 	}
  89:app/armv7m/src/application.c **** }
  90:app/armv7m/src/application.c **** VOID Task3(VOID* args)
  91:app/armv7m/src/application.c **** {
 352              		.loc 1 91 1 view -0
 353              		.cfi_startproc
 354              		@ Volatile: function does not return.
 355              		@ args = 0, pretend = 0, frame = 0
 356              		@ frame_needed = 0, uses_anonymous_args = 0
 357              	.LVL24:
 358              		.loc 1 91 1 is_stmt 0 view .LVU58
 359 0000 08B5     		push	{r3, lr}
 360              		.cfi_def_cfa_offset 8
 361              		.cfi_offset 3, -8
 362              		.cfi_offset 14, -4
 363              	.LVL25:
ARM GAS  /var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s 			page 21


 364              	.L29:
  92:app/armv7m/src/application.c ****     RK_UNUSEARGS
 365              		.loc 1 92 5 is_stmt 1 discriminator 1 view .LVU59
  93:app/armv7m/src/application.c **** 	while (1)
 366              		.loc 1 93 2 discriminator 1 view .LVU60
  94:app/armv7m/src/application.c **** 	{
  95:app/armv7m/src/application.c **** 		kSleep(4);
 367              		.loc 1 95 3 discriminator 1 view .LVU61
 368 0002 0420     		movs	r0, #4
 369 0004 FFF7FEFF 		bl	kSleep
 370              	.LVL26:
  96:app/armv7m/src/application.c ****         kPuts("Task 3 is synching...\n\r");
 371              		.loc 1 96 9 discriminator 1 view .LVU62
 372 0008 0248     		ldr	r0, .L31
 373 000a FFF7FEFF 		bl	kPuts
 374              	.LVL27:
  97:app/armv7m/src/application.c **** 		synch();
 375              		.loc 1 97 3 discriminator 1 view .LVU63
 376 000e FFF7FEFF 		bl	synch
 377              	.LVL28:
  93:app/armv7m/src/application.c **** 	{
 378              		.loc 1 93 8 discriminator 1 view .LVU64
 379 0012 F6E7     		b	.L29
 380              	.L32:
 381              		.align	2
 382              	.L31:
 383 0014 00000000 		.word	.LC3
 384              		.cfi_endproc
 385              	.LFE62:
 387              		.global	syncMutex
 388              		.section	.bss.syncMutex,"aw",%nobits
 389              		.align	2
 392              	syncMutex:
 393 0000 00000000 		.space	36
 393      00000000 
 393      00000000 
 393      00000000 
 393      00000000 
 394              		.global	syncCounter
 395              		.section	.bss.syncCounter,"aw",%nobits
 396              		.align	2
 399              	syncCounter:
 400 0000 00000000 		.space	4
 401              		.global	syncEvent
 402              		.section	.bss.syncEvent,"aw",%nobits
 403              		.align	2
 406              	syncEvent:
 407 0000 00000000 		.space	28
 407      00000000 
 407      00000000 
 407      00000000 
 407      00000000 
 408              		.global	UART0_DR
 409              		.section	.rodata.UART0_DR,"a"
 410              		.align	2
 413              	UART0_DR:
 414 0000 00C00040 		.word	1073790976
ARM GAS  /var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s 			page 22


 415              		.global	stack3
 416              		.section	.bss.stack3,"aw",%nobits
 417              		.align	3
 420              	stack3:
 421 0000 00000000 		.space	1024
 421      00000000 
 421      00000000 
 421      00000000 
 421      00000000 
 422              		.global	stack2
 423              		.section	.bss.stack2,"aw",%nobits
 424              		.align	3
 427              	stack2:
 428 0000 00000000 		.space	1024
 428      00000000 
 428      00000000 
 428      00000000 
 428      00000000 
 429              		.global	stack1
 430              		.section	.bss.stack1,"aw",%nobits
 431              		.align	3
 434              	stack1:
 435 0000 00000000 		.space	1024
 435      00000000 
 435      00000000 
 435      00000000 
 435      00000000 
 436              		.global	task3Handle
 437              		.section	.bss.task3Handle,"aw",%nobits
 438              		.align	2
 441              	task3Handle:
 442 0000 00000000 		.space	4
 443              		.global	task2Handle
 444              		.section	.bss.task2Handle,"aw",%nobits
 445              		.align	2
 448              	task2Handle:
 449 0000 00000000 		.space	4
 450              		.global	task1Handle
 451              		.section	.bss.task1Handle,"aw",%nobits
 452              		.align	2
 455              	task1Handle:
 456 0000 00000000 		.space	4
 457              		.text
 458              	.Letext0:
 459              		.file 3 "arch/armv7m/kernel/inc/kdefs.h"
 460              		.file 4 "core/inc/kobjs.h"
 461              		.file 5 "app/armv7m/inc/application.h"
ARM GAS  /var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s 			page 23


DEFINED SYMBOLS
                            *ABS*:00000000 application.c
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:19     .text.kPutc:00000000 $t
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:25     .text.kPutc:00000000 kPutc
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:42     .text.kPutc:00000008 $d
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:47     .text.kPuts:00000000 $t
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:53     .text.kPuts:00000000 kPuts
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:90     .rodata.synch.str1.4:00000000 $d
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:94     .text.synch:00000000 $t
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:99     .text.synch:00000000 synch
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:195    .text.synch:00000058 $d
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:392    .bss.syncMutex:00000000 syncMutex
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:399    .bss.syncCounter:00000000 syncCounter
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:406    .bss.syncEvent:00000000 syncEvent
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:203    .text.kApplicationInit:00000000 $t
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:209    .text.kApplicationInit:00000000 kApplicationInit
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:237    .text.kApplicationInit:00000018 $d
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:244    .rodata.Task1.str1.4:00000000 $d
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:248    .text.Task1:00000000 $t
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:254    .text.Task1:00000000 Task1
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:287    .text.Task1:00000014 $d
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:292    .rodata.Task2.str1.4:00000000 $d
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:296    .text.Task2:00000000 $t
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:302    .text.Task2:00000000 Task2
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:335    .text.Task2:00000014 $d
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:340    .rodata.Task3.str1.4:00000000 $d
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:344    .text.Task3:00000000 $t
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:350    .text.Task3:00000000 Task3
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:383    .text.Task3:00000014 $d
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:389    .bss.syncMutex:00000000 $d
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:396    .bss.syncCounter:00000000 $d
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:403    .bss.syncEvent:00000000 $d
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:413    .rodata.UART0_DR:00000000 UART0_DR
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:410    .rodata.UART0_DR:00000000 $d
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:420    .bss.stack3:00000000 stack3
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:417    .bss.stack3:00000000 $d
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:427    .bss.stack2:00000000 stack2
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:424    .bss.stack2:00000000 $d
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:434    .bss.stack1:00000000 stack1
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:431    .bss.stack1:00000000 $d
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:441    .bss.task3Handle:00000000 task3Handle
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:438    .bss.task3Handle:00000000 $d
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:448    .bss.task2Handle:00000000 task2Handle
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:445    .bss.task2Handle:00000000 $d
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:455    .bss.task1Handle:00000000 task1Handle
/var/folders/fg/4fzv35n91mbcgx4z5jzqdsl40000gn/T//ccmSBrNs.s:452    .bss.task1Handle:00000000 $d

UNDEFINED SYMBOLS
kMutexLock
kMutexUnlock
kEventSleep
kEventWake
kMutexInit
kEventInit
kSleep
